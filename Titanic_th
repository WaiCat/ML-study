import pandas as pd

train = pd.read_csv('/kaggle/input/titanic/train.csv')
test = pd.read_csv('/kaggle/input/titanic/test.csv')
/
train.head()
/
test.head()
/
train.shape
/
test.shape
/
train.info()
/
test.info()
/
train.isnull().sum()
/
test.isnull().sum()
/
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
sns.set()
/
def bar_chart(feature):
    survived = train[train['Survived']==1][feature].value_counts()
    dead = train[train['Survived']==0][feature].value_counts()
    df = pd.DataFrame([survived, dead])
    df.index = ['Survived', 'Dead']
    df.plot(kind='bar', stacked=True, figsize=(10, 5))
/
bar_chart('Sex')
/
bar_chart('Pclass') #등급별
/
bar_chart('SibSp') #같이탄 일가친척수
/
bar_chart('Parch') #같이탄 1촌 가족수
/
bar_chart('Embarked') #탑승한 선착장
/
Name
Mr : 0 Miss : 1 Mrs: 2 Others: 3
/
train.head(10) #이름에서의 결혼 여부 확인
/
train_test_data = [train, test] #이름에서 확인한 결혼 여부 Title로 작성및 기입

for dataset in train_test_data:
    dataset['Title'] = dataset['Name'].str.extract('([A-Za-z]+)\.', expand=False)
/
train['Title'].value_counts()
/
test['Title'].value_counts()
/
title_mapping = {"Mr": 0, "Miss": 1, "Mrs": 2, 
                 "Master": 3, "Dr": 3, "Rev": 3, "Col": 3, "Major": 3, "Mlle": 3,"Countess": 3,
                 "Ms": 3, "Lady": 3, "Jonkheer": 3, "Don": 3, "Dona" : 3, "Mme": 3,"Capt": 3,"Sir": 3 }
for dataset in train_test_data: #Title 숫자화 해 매핑
    dataset['Title'] = dataset['Title'].map(title_mapping)
/
train.head()
/
bar_chart('Title')
/
train.drop('Name', axis=1, inplace=True) #이름 필요없으니 제거
test.drop('Name', axis=1, inplace=True)
/
train.head()
/
Sex
male:0, female:1
/
sex_mapping = {"male": 0, "female": 1}
for dataset in train_test_data:
    dataset['Sex'] = dataset['Sex'].map(sex_mapping)
/
bar_chart('Sex')
/
Age
/
train.head(10)
/
#각 결혼여부 및 성별 반영후 평균 나잇값으로 Null값 채움
train["Age"].fillna(train.groupby("Title")["Age"].transform("median"), inplace=True)
test["Age"].fillna(test.groupby("Title")["Age"].transform("median"), inplace=True)
/
train.head(30)
train.groupby("Title")["Age"].transform("median")
/
facet = sns.FacetGrid(train, hue="Survived",aspect=4)
facet.map(sns.kdeplot,'Age',shade= True)
facet.set(xlim=(0, train['Age'].max()))
facet.add_legend()
 
plt.show() 
/
for dataset in train_test_data:
    dataset.loc[ dataset['Age'] <= 18, 'Age'] = 0
    dataset.loc[ (dataset['Age'] > 18) & (dataset['Age'] < 37), 'Age'] = 1
    dataset.loc[ dataset['Age'] > 37, 'Age'] = 2
/
train.head(10)
/
Cabin
/
train.head(10)
/
train.Cabin.value_counts()
/
